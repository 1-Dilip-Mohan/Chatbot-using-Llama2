name: workflow

on:
    push:
        branches:
            - main
        
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Code
          uses: actions/checkout@v3

        - name: Set up Python 3.10
          uses: actions/setup-python@v3
          with:
            python-version: 3.10
        - name: Install Dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        
        - name: Lint code
          run: echo "Linting repository"

        - name: Run unit tests
          run: echo "Running unit tests"
    
    sonarqube:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
        - name: SonarQube Scan
          uses: sonarsource/sonarqube-scan-action@master
          env:
            SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
            SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}

            name: Build with Trivy Scan
            runs-on: ubuntu-20.04  # Changed runner OS to ubuntu-20.04
        
            steps:
              - name: Checkout code
                uses: actions/checkout@v3
        
              - name: Run Trivy vulnerability scanner
                uses: aquasecurity/trivy-action@master
                with:
                  image-ref: 'aws_account_id.dkr.ecr.region.amazonaws.com/imageName:${{ github.sha }}'
                  format: 'sarif'
                  output: 'trivy-results.sarif'
                env:
                  AWS_ACCESS_KEY_ID: key_id
                  AWS_SECRET_ACCESS_KEY: access_key
                  AWS_DEFAULT_REGION: us-west-2
        
              - name: Upload Trivy scan results to GitHub Security tab
                uses: github/codeql-action/upload-sarif@v2
                with:
                  sarif_file: 'trivy-results.sarif'

    build-and-push-ecr-image:
              name: Continuous Delivery
              needs: integration
              runs-on: ubuntu-latest
              steps:
                - name: Checkout Code
                  uses: actions/checkout@v3
          
                - name: Install Utilities
                  run: |
                    sudo apt-get update
                    sudo apt-get install -y jq unzip
                - name: Configure AWS credentials
                  uses: aws-actions/configure-aws-credentials@v1
                  with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: ${{ secrets.AWS_REGION }}
          
                - name: Login to Amazon ECR
                  id: login-ecr
                  uses: aws-actions/amazon-ecr-login@v1
          
                - name: Build, tag, and push image to Amazon ECR
                  id: build-image
                  env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
                    IMAGE_TAG: latest
                  run: |
                      # Build a docker container and
                      # push it to ECR so that it can
                      # be deployed to ECS.
                      docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                      docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                      echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            Continuous-Deployment:
              needs: build-and-push-ecr-image
              runs-on: self-hosted
              steps:
                - name: Checkout
                  uses: actions/checkout@v3
          
                - name: Configure AWS credentials
                  uses: aws-actions/configure-aws-credentials@v1
                  with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: ${{ secrets.AWS_REGION }}
          
                - name: Login to Amazon ECR
                  id: login-ecr
                  uses: aws-actions/amazon-ecr-login@v1
                
                
                - name: Pull latest images
                  run: |
                   docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
                   
                # - name: Stop and remove container if running
                #   run: |
                #    docker ps -q --filter "name=cnncls" | grep -q . && docker stop cnncls && docker rm -fv cnncls
                 
                - name: Run Docker Image to serve users
                  run: |
                   docker run -d -p 8080:8080 --name=cnncls -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
                - name: Clean previous images and containers
                  run: |
                   docker system prune -f